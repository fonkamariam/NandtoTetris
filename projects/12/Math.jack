// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array TwotoI;
    /** Initializes the library. */
    function void init() {
        var int w,i;
        let w=1;
        let i=0;
        let TwotoI=Array.new(16);
        while(i<16){
            let TwotoI[i]=w;
            let w=w+w; 
            let i=i+1;
        }
        return;
    }
    function int Mod(int x,int y){
        var int div,rem;
        let div=0;
        let rem=x;
        while( (rem>y)|(rem=y)){
            let rem= rem -y;
            let div = div + 1;
        }
        return rem;
    }
    
    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x <0 ){
            return -x;
        }else{
            return x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiplyOld(int x, int y) {
        var int i,sum,sign;
        if ( (x<0) & (y<0) ){
            let sign = 1; 
        }
        if ( (x<0) & (y>0) ){
            let sign = -1; 
        }
        if ( (x>0) & (y<0) ){
            let sign = -1; 
        }
        if ( (x>0) & (y>0) ){
            let sign = 1; 
        }
        
        let x = Math.abs(x);
        let y = Math.abs(y);
        
        let i = 0;
        let sum=0;
        while (i < y){
            let sum = sum + x;  
            let i=i+1;
        }
        if (sign = 1){
            return sum;
        }else{
            return -sum;
        }
    }
    function int multiply(int x, int y) {
        var int i,sum,sign,shiftedX,sorry;
        
        if((x=0)|(y=0)){
            return 0;
        }
        if((x=1)){
            return y;
        }
        if((y=1)){
            return x;
        }
        if((x=-1)){
            return -y;
        }
        if((y=-1)){
            return -x;
        }
        
        if ( (x<0) & (y<0) ){
            let sign = 1; 
        }
        if ( (x<0) & (y>0) ){
            let sign = -1; 
        }
        if ( (x>0) & (y<0) ){
            let sign = -1; 
        }
        if ( (x>0) & (y>0) ){
            let sign = 1; 
        }
        
        let x = Math.abs(x);
        let y = Math.abs(y);
        
        let i = 0;
        let sum=0;
        let shiftedX = x;
        while(i<16){
            let sorry = (y) & (TwotoI[i]);
             if(~(sorry = 0)){
                let sum=sum+shiftedX;
            }
            let shiftedX=shiftedX+shiftedX;
            let i = i+1;
        }
        if (sign = 1){
            return sum;
        }else{
            return -sum;
        }
    }
    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide_help(int x, int y) {
        var int q,sign;
        
        let x = Math.abs(x);
        let y = Math.abs(y);
        if ((y>x) | (y<0)){
            return 0;
        }
        let q = Math.divide_help(x ,2*y );
        if ( (x-(2*q*y)) < y){
            return 2 * q;
        }else{
            return 2 * q+1;
        }
    }
    function int divide(int x, int y) {
        var int div,rem,sign;
        if (y=0){
            // sysError
            return;
        }
        if (x=0){return 0;}
        if ( (x<0) & (y<0) ){
            let sign = 1; 
        }
        if ( (x<0) & (y>0) ){
            let sign = -1; 
        }
        if ( (x>0) & (y<0) ){
            let sign = -1; 
        }
        if ( (x>0) & (y>0) ){
            let sign = 1; 
        }
        
        let x = Math.abs(x);
        let y = Math.abs(y);
        
        let div=0;
        let rem=x;
        while( (rem>y)|(rem=y)){
            let rem= rem -y;
            let div = div + 1;
        }
        return div*sign;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {        
        if ( a<0 & b<0 ){if ((a-b) > 0){return a;}else{return b;}}
        if ( a<0 & b>0 ){return b;}
        if ( a>0 & b<0 ){return a; }
        if ( a>0 & b>0 ){if ((a-b) > 0){return a;}else{return b;}}
       }
    

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if ( (a<0) & (b<0) ){if ((a-b) < 0){return a;}else{return b;}}
        if ( (a<0) & (b>0) ){return a;}
        if ( (a>0) & (b<0) ){return b; }
        if ( (a>0) & (b>0) ){if ((a-b) < 0){return a;}else{return b;}}
       }
    /** Returns the square root of the number*/
    function int sqrt(int x) {
        var int s,e,mid,midS,midS2;
        if (x<-1){return;}
        let s=0;
        let e=x/2;
        if (x=32767){return 181;}
        if (e>364){let e=363;}

        while((s<e)|(s=e)){
            let mid = (s+e)/2;
            let midS=mid*mid;
            if (mid=181){
                let midS2=32767;
            }else{
                let midS2=midS +mid +mid +1;
            }
            if (((midS<x)|(midS=x))&(midS2 > x)){
                return mid;
            }
            if (midS>x){let e=mid-1;}
            if (midS<x){let s=mid+1;}
            if (midS=x){return mid;}
            }
        return mid;
    
}
    function int bit(int x, int i){
        if ((x & TwotoI[i])=0){
            return 1;
        }else{
            return 0;
        }
    }
    function int getPower(int i){
        return TwotoI[i];
}
}