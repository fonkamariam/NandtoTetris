// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Keyboard.jack

/**
 * A library for handling user input from the keyboard.
 */
class Keyboard {
    static int Keyboardcode;
    /** Initializes the keyboard. */
    function void init() {
        let Keyboardcode=24576;
        return;
    } 

    /**
     * Returns the character of the currently pressed key on the keyboard;
     * if no key is currently pressed, returns 0.
     *
     * Recognizes all ASCII characters, as well as the following keys:
     * new line = 128 = String.newline()
     * backspace = 129 = String.backspace()
     * left arrow = 130
     * up arrow = 131
     * right arrow = 132
     * down arrow = 133
     * home = 134
     * End = 135
     * page up = 136
     * page down = 137
     * insert = 138
     * delete = 139
     * ESC = 140
     * F1 - F12 = 141 - 152
     */
    function char keyPressed() {
        return Memory.peek(Keyboardcode);
    }

    /**								
     * Waits until a key is pressed on the keyboard and released,
     * then echoes the key to the screen, and returns the character 
     * of the pressed key.
     */
    function char readChar() {
        var int c , kp;
            
        let kp = Keyboard.keyPressed();

        while(kp=0){
            let kp = Keyboard.keyPressed();
        }
        let c = kp;
        while(~(kp=0)){
            let kp = Keyboard.keyPressed();
        }
        if (c=128){return c;}
        if(c=129){return c;}
        do Output.printChar(c);
        return c;
    
    }
    function char readCharWithoutPrinting() {
        var int c , kp;
            
            let kp = Keyboard.keyPressed();

            while(kp=0){
                let kp = Keyboard.keyPressed();
            }
            let c = kp;
            while(~(kp=0)){
                let kp = Keyboard.keyPressed();
            }
            return c;
        
    }

    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its value. Also handles user backspaces.
     */
    function String readLine(String message) {
        var int check,c,back_check,string_empty_check;
        var String temp;
        var Linked_List a;
        do Output.printString(message);
        let a = Linked_List.new();
        let back_check=0;
        let check=0;
        let string_empty_check=0;
        while (check=0){
            let c = Keyboard.readChar();
            if (c=128){
                do Output.println();
                if(string_empty_check=0){return 0;}
                let temp=a.ChangetoString();
                do a.dispose();
                return temp; //changed to string
            }
            if(c=129){ 
                if(~(back_check=0)){
                do Output.backSpace();
                do a.pop();
                let back_check=back_check-1;
                }
                }
            if (~(c=129)){do a.insert(c);let back_check=back_check+1;let string_empty_check=1;}
        } 
        return;
    }   
    
    /**								
     * Displays the message on the screen, reads from the keyboard the entered
     * text until a newline character is detected, echoes the text to the screen,
     * and returns its integer value (until the first non-digit character in the
     * entered text is detected). Also handles user backspaces. 
     */
    function int readInt(String message) {
        //////////////////////////
        var int check,c,anohter_check,back_check,string_empty_check;
        var String temp;
        var Linked_List a;
        // s=input(message)
        do Output.printString(message);
        //
        let a = Linked_List.new();
        let check=0;
        let anohter_check=0;
        let back_check=0;
        let string_empty_check=0;
        while (check=0){  
            let c = Keyboard.readCharWithoutPrinting();    
            if (c=45){do a.insert(c);do Output.printChar(c);}
            if (c=128){
                do Output.println();
                if(string_empty_check=0){return 0;}
                let temp =a.ChangetoString();
                do a.dispose();
                return temp.intValue();
            }
            if(c=129){ 
                if(~(back_check=0)){
                do Output.backSpace();
                do a.pop();
                let back_check=back_check-1;
                }
            }
            if (((c>47)&(c<58))){do Output.printChar(c);let anohter_check=1;}
            if ((~(c=129))&(anohter_check=1)){do a.insert(c);let anohter_check=0;let back_check=back_check+1;let string_empty_check=1;}
        }
        return;
         
    }
}
