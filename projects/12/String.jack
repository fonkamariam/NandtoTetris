// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */

class String {
    field Array lag;
    field int CurrL,maxL;
    static int Stringneg,makezero;
    static boolean tick;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength=0){
        let lag=0;
        let CurrL=0;
        let maxL=maxLength;
        let Stringneg=0; 
        let makezero=0; 
        let tick =false;
        return this;}
        let lag = Memory.alloc(maxLength);
        let CurrL=0;
        let maxL=maxLength;
        let Stringneg=0;
        let makezero=0;
        let tick=false;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        var int next;
        let next= Memory.peek(this); 
        do Memory.deAlloc(this); 
        if (~(maxL=0)){do Memory.deAlloc(next);}
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return CurrL;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (j<maxL){
            return lag[j]; 
        }else{
            // sys handles a problem 
            return; 
        }

    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (j>maxL){
            // sys handles the problem
            return;}
        let lag[j]=c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (CurrL+1>maxL){
            // handles error
           return;}
        let lag[CurrL]= c;
        let CurrL=CurrL+1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (CurrL>maxL){
            // handles error
           return;}
        let lag[CurrL-1]=0;
        let CurrL=CurrL-1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int temp,valuee,d,factor,sign;
        let makezero=Stringneg;
        let temp=0;
        let valuee=0;
        let factor= 1;
        let sign=0;
        if(lag[0]=45){let sign=1;let CurrL=CurrL-1;let makezero=makezero+1;}
        while(temp<(CurrL-1)){ 
            let factor= factor*10;
            let temp=temp+1;
        }
        let temp=0;
        while (temp<CurrL){
            let d = (lag[makezero]-48)*factor;
            let valuee= valuee+d;
            let makezero=makezero+1;
            let factor = factor/10;
            let temp=temp+1;
        }
        if (sign=1){let CurrL=CurrL+1;return -valuee;}
        return valuee;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int temp,value,mod;
        if (tick=false){let makezero=Stringneg;}
        if (val<0){let val=-val;let lag[makezero]=45;let makezero=makezero+1;let tick=true;}
        if (val=0){
            let tick=false;
            return;
        }
        let mod=Math.Mod(val,10);
        let value= (val-mod)/10;
        do this.setInt(value);
        let lag[makezero]=48+mod;
        let makezero=makezero+1;
        let CurrL=makezero;
        return;
    }

    /** Returns the new line character. */
    function char newLine() { 
        return 128;
    }
 /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}