class Screen {
    static int baseScreen,setColorVAR;
    /** Initializes the Screen. */
    function void init() { 
        let baseScreen= 16384;
        let setColorVAR=1;
        return;
    }


    function void OptLine(int x1, int y1, int x2, int y2) {
        var int modBit,divAdd,divAdd1,modBit1,i,diffX,baseAddress,baseAddress1,baseAddress2;
        
        let baseAddress=16384+(32*y1);
        let diffX=x2-x1;
        let i =0;
        if (diffX=0){return;}
    
        if (diffX<16){
            while(i<diffX){
                do Screen.drawPixel(x1-1+i,y1);  
                let i=i+1; 
            } 
            return; 
        }
    
        let divAdd=x1/16;
        let modBit= Math.Mod(x1,16); 
        let divAdd1=x2/16;
        let modBit1=Math.Mod(x2,16);
        if (modBit=0){
            let baseAddress1=baseAddress+divAdd; 
        }else{ 
            let i=0;
            while(i<modBit){
               
                do Screen.drawPixel(x1+i,y1); 
                let i=i+1;
            }
            
            let baseAddress1=baseAddress+divAdd+1;
        }
        // second Half
        if (modBit1=0){
            let baseAddress2=baseAddress+divAdd1;
            }else{
                let i=0;
                while(i<(modBit1+1)){
                    do Screen.drawPixel(x2-i,y1);
                    let i=i+1;
                }
                let baseAddress2=baseAddress+divAdd1;
            }
        
        while (baseAddress2 > baseAddress1){
            do Memory.poke(baseAddress1,-setColorVAR);
            let baseAddress1=baseAddress1 + 1;
        }
        return; 
    }


    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while (i<8191){
            do Memory.poke(i+baseScreen,0);
            let i=i+1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        // default is True(1);
        if (b=true){
            let setColorVAR = 1;
            return;
        }else{
            let setColorVAR = 0;
            return;
        }
    }


    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address,value,bitt,revelation;
        let address = (32*y) + (x/16) + baseScreen;
        let value= Memory.peek(address);
        let bitt = Math.Mod(x,16);
        let revelation=Math.bit(value,bitt); // 1 - off / 0-on
        
        if (~(revelation = setColorVAR)){return;}
        if ((revelation & setColorVAR)=0){
            let value= value - Math.getPower(bitt);
        }else{
            let value= value + Math.getPower(bitt);
        }    
        do Memory.poke(address,value);
        return;
}

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
            var int diff,diffY,diffX,a,b;
            let diffX = x2-x1;
            let diffY = y2-y1;
            let diff = 0;
            let a=0;
            let b=0;
        // handling Vertical line Case 1/6
            if(diffX=0){    
                if ( diffY > 0 ){
                    while ((diffY+1)>0){
                        do Screen.drawPixel(x1,y1);
                        let y1= y1+1;
                        let diffY= diffY-1;
                    }
                }else{
                    let diffY = diffY * -1; 
                    while ((diffY+1)>0){
                        do Screen.drawPixel(x1,y1);
                        let y1= y1-1;
                        let diffY= diffY-1;   
                    }
                }
                return; 
                }
        // handling Horizontal line Case 2/6    
            if (diffY=0){
                if ( diffX > 0 ){
                    while ((diffX+1)>0){
                        do Screen.drawPixel(x1,y1);
                        let x1= x1+1;
                        let diffX= diffX-1; 
                    }
                return;
                    
                }else{ 
                    let diffX = -diffX;
                    while ((diffX+1)>0){
                        do Screen.drawPixel(x1,y1);
                        let x1= x1-1;
                        let diffX= diffX-1; 
                    }
                return;
                }}
        // handling South East Case 3/6
            if ((x1<x2)&(y1<y2)){
                while (((a<diffX)|(a=diffX))&((b<diffY)|(b=diffY))){
                do Screen.drawPixel(x1+a,y1+b);
                    if (diff<0){
                        let a = a +1;
                        let diff=diff+diffY;
                    }else{
                        let b = b+1;
                        let diff=diff-diffX;
                    }   
                }return;}
        // handling South West line Case 4/6
            if ((x1>x2)&(y1<y2)){
                let diffX=x1-x2;
                while (((a<diffX)|(a=diffX))&((b<diffY)|(b=diffY))){
                do Screen.drawPixel(x1+a,y1+b);
                    if (diff<0){
                        let a = a - 1;
                        let diff=diff+diffY; 
                    }else{ 
                        let b = b + 1; 
                        let diff=diff-diffX;
                    }   
                }return;}
    
        // handling North East line Case 5/6
            if ((x1<x2)&(y1>y2)){
                let diffY=y1-y2;
                while (((a<diffX)|(a=diffX))&((b<diffY)|(b=diffY))){
                do Screen.drawPixel(x1+a,y1+b);
                    if (diff<0){
                        let a = a + 1;
                        let diff=diff+diffY; 
                    }else{ 
                        let b = b - 1; 
                        let diff=diff-diffX;
                    }   
                }return;}
    
        // handling North West line Case 6/6
            if ((x1>x2)&(y1>y2)){
                let diffY=y1-y2;
                let diffX=x1-x2;
                while (((a<diffX)|(a=diffX))&((b<diffY)|(b=diffY))){
                do Screen.drawPixel(x1-a,y1-b);
                    if (diff<0){
                        let a = a + 1;
                        let diff=diff+diffY; 
                    }else{ 
                        let b = b + 1; 
                        let diff=diff-diffX;
                    }   
                }return;}
    }
    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int diffY,diffX;
        
        let diffX = x2-x1;
        let diffY = y2-y1;
        
        while((diffY+1)>0){
            do Screen.drawLine(x1,y1,x2,y1);
            let y1=y1+1;
            let diffY=diffY-1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int dy,loop,temp;
        let dy=-r; 
        let loop=r+r;
        while (loop>0){
            let temp= Math.sqrt((r*r)-(dy*dy));
            do Screen.drawLine((x-temp),(y+dy),(x+temp),(y+dy));
            let loop=loop-1;
            let dy=dy+1;
        } 
        return; 
    }
    function int retBaseScreen(){
        return 16384;
    }
}
