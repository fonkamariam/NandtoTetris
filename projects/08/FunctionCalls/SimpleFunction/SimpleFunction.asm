@Sys.init
(SimpleFunction.test)
@2 
D=A
@temp
M=D
(LCL_COND)
@SP
A=M
M=0
@SP
M=M+1
@temp
M=M-1
D=M
@LCL_COND
D;JNE
(Jump_end_func)
//push LCL 0
@LCL
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
//push LCL 1
@1
D=A
@LCL
M=M+D
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
@1
D=A
@LCL
M=M-D
//add
@SP
M=M-1
A=M
D=M
@SP  
M=M-1
A=M
M=D+M
@SP
M=M+1
//Not
@SP
M=M-1
A=M
M=!M
@SP
M=M+1    
//push ARG 0
@ARG
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
//add
@SP
M=M-1
A=M
D=M
@SP  
M=M-1
A=M
M=D+M
@SP
M=M+1
//push ARG 1
@1
D=A
@ARG
M=M+D
A=M
D=M
@SP
A=M
M=D
@SP
M=M+1
@1
D=A
@ARG
M=M-D
//sub
@SP 
M=M-1 
A=M
D=M
@SP  
M=M-1
A=M
M=M-D
@SP
M=M+1
//return
// CREATES VARIABLE ENDFRAME
@LCL
D=M
@endframe // ENDFRAME=LCL
M=D
@endframe
A=M
D=M
// SETS THE RETURN VALUE TO THE CALLER
@SP
M=M-1
A=M
D=M
@ARG
A=M
M=D
// GIVES THE POINTER BACK TO THE CALLER
@ARG
M=M+1
D=M
@SP
M=D
//RESTORING THAT
@endframe
M=M-1
A=M
D=M
@THAT
M=D
//RESTORING THIS
@endframe
M=M-1
A=M
D=M
@THIS
M=D
//RESTORING ARG
@endframe
M=M-1
A=M
D=M
@ARG
M=D
//RESTORING LCL
@endframe
M=M-1
A=M
D=M
@LCL
M=D
@return_address
0;JMP
(return_address)
(Haaland)
@Haaland
0;JMP
